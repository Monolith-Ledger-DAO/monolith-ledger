From 7ad57d75aca0b1926c42201988f3a445ef4beee8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Laxio=20=D0=90?= <vtrendeco@gmail.com>
Date: Tue, 1 Jul 2025 23:33:36 +0000
Subject: [PATCH] Fix smart contracts and tests

- Fix MonolithGovernanceToken: Add ERC20Votes and ERC20Permit support for governance
- Fix MonolithLedgerDAO: Add missing imports, Ownable inheritance, and method overrides
- Update deployment test: Add vote delegation for governance functionality
- All tests now pass successfully
---
 .gitpod.yml                           | 10 ++++
 contracts/MonolithGovernanceToken.sol | 26 ++++++++-
 contracts/MonolithLedgerDAO.sol       | 16 +++---
 hardhat.config.js                     | 10 +++-
 test/deployment.test.js               | 76 +++++++++++++++++++++++++++
 5 files changed, 126 insertions(+), 12 deletions(-)
 create mode 100644 .gitpod.yml
 create mode 100644 test/deployment.test.js

diff --git a/.gitpod.yml b/.gitpod.yml
new file mode 100644
index 0000000..4671a1f
--- /dev/null
+++ b/.gitpod.yml
@@ -0,0 +1,10 @@
+# This configuration file was automatically generated by Gitpod.
+# Please adjust to your needs (see https://www.gitpod.io/docs/introduction/learn-gitpod/gitpod-yaml)
+# and commit this file to your remote git repository to share the goodness with others.
+
+# Learn more from ready-to-use templates: https://www.gitpod.io/docs/introduction/getting-started/quickstart
+
+tasks:
+  - init: npm install
+
+
diff --git a/contracts/MonolithGovernanceToken.sol b/contracts/MonolithGovernanceToken.sol
index 4b4bab6..53212e3 100644
--- a/contracts/MonolithGovernanceToken.sol
+++ b/contracts/MonolithGovernanceToken.sol
@@ -2,6 +2,8 @@
 pragma solidity ^0.8.20;
 
 import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
+import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";
+import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";
 import "@openzeppelin/contracts/access/Ownable.sol";
 
 /**
@@ -10,12 +12,32 @@ import "@openzeppelin/contracts/access/Ownable.sol";
  * Symbol: LITH
  * Total Supply: 100,000,000 tokens.
  * The supply is fixed and all tokens are minted to the contract deployer.
+ * Supports voting and delegation for governance.
  */
-contract MonolithGovernanceToken is ERC20, Ownable {
+contract MonolithGovernanceToken is ERC20, ERC20Permit, ERC20Votes, Ownable {
     constructor(address initialOwner)
         ERC20("MonolithGovernanceToken", "LITH")
+        ERC20Permit("MonolithGovernanceToken")
         Ownable(initialOwner)
     {
         _mint(msg.sender, 100000000 * 10**decimals());
     }
-}
\ No newline at end of file
+
+    // The following functions are overrides required by Solidity.
+
+    function _update(address from, address to, uint256 value)
+        internal
+        override(ERC20, ERC20Votes)
+    {
+        super._update(from, to, value);
+    }
+
+    function nonces(address owner)
+        public
+        view
+        override(ERC20Permit, Nonces)
+        returns (uint256)
+    {
+        return super.nonces(owner);
+    }
+}
diff --git a/contracts/MonolithLedgerDAO.sol b/contracts/MonolithLedgerDAO.sol
index c11b4d2..184e64b 100644
--- a/contracts/MonolithLedgerDAO.sol
+++ b/contracts/MonolithLedgerDAO.sol
@@ -7,6 +7,8 @@ import "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol
 import "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol";
 import "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol";
 import "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol";
+import "@openzeppelin/contracts/governance/TimelockController.sol";
+import "@openzeppelin/contracts/access/Ownable.sol";
 
 /**
  * @title MonolithLedgerDAO
@@ -19,7 +21,8 @@ contract MonolithLedgerDAO is
     GovernorCountingSimple,
     GovernorVotes,
     GovernorVotesQuorumFraction,
-    GovernorTimelockControl
+    GovernorTimelockControl,
+    Ownable
 {
     /**
      * @dev Constructor to set up the DAO with initial settings.
@@ -43,6 +46,7 @@ contract MonolithLedgerDAO is
         GovernorVotes(_token)
         GovernorVotesQuorumFraction(_initialQuorumFraction)
         GovernorTimelockControl(_timelock)
+        Ownable(msg.sender)
     {}
 
     // The following functions are overrides required by Solidity.
@@ -98,9 +102,6 @@ contract MonolithLedgerDAO is
         return GovernorTimelockControl._cancel(targets, values, calldatas, descriptionHash);
     }
 
-    // The compiler insists that _queueOperations and _executeOperations are the ones
-    // that need overriding due to conflicts.
-
     function _queueOperations(
         uint256 proposalId,
         address[] memory targets,
@@ -108,10 +109,6 @@ contract MonolithLedgerDAO is
         bytes[] memory calldatas,
         bytes32 descriptionHash
     ) internal virtual override(Governor, GovernorTimelockControl) returns (uint48) {
-        // Assuming GovernorTimelockControl implements _queueOperations or a function
-        // with this signature that we need to call.
-        // If GovernorTimelockControl uses _queue, this call might need adjustment
-        // or the function itself in GovernorTimelockControl is what we are overriding.
         return GovernorTimelockControl._queueOperations(proposalId, targets, values, calldatas, descriptionHash);
     }
 
@@ -124,4 +121,5 @@ contract MonolithLedgerDAO is
     ) internal virtual override(Governor, GovernorTimelockControl) {
         GovernorTimelockControl._executeOperations(proposalId, targets, values, calldatas, descriptionHash);
     }
-}
\ No newline at end of file
+
+}
diff --git a/hardhat.config.js b/hardhat.config.js
index b63f0c2..e8dd51e 100644
--- a/hardhat.config.js
+++ b/hardhat.config.js
@@ -2,5 +2,13 @@ require("@nomicfoundation/hardhat-toolbox");
 
 /** @type import('hardhat/config').HardhatUserConfig */
 module.exports = {
-  solidity: "0.8.28",
+      solidity: {
+        version: "0.8.20", // Убедитесь, что это ваша текущая версия Solidity
+        settings: {
+            optimizer: {
+                enabled: true,
+                runs: 200 // Оптимизирует для 200 вызовов (хороший баланс)
+            }
+        }
+    },
 };
diff --git a/test/deployment.test.js b/test/deployment.test.js
new file mode 100644
index 0000000..a1f6852
--- /dev/null
+++ b/test/deployment.test.js
@@ -0,0 +1,76 @@
+const { expect } = require("chai");
+const { ethers } = require("hardhat");
+
+describe("Monolith Ledger DAO Deployment and Integration", function () {
+    let owner, addr1;
+    let lith;
+    let mle;
+    let timelock;
+    let dao;
+
+    before(async function () {
+        [owner, addr1] = await ethers.getSigners();
+
+        // 1. Deploy LITH Token
+        const MonolithGovernanceToken = await ethers.getContractFactory("MonolithGovernanceToken");
+        lith = await MonolithGovernanceToken.deploy(owner.address);
+        await lith.waitForDeployment();
+        console.log(`LITH Token deployed to: ${await lith.getAddress()}`);
+
+        // 2. Deploy MLE Token
+        const MonolithAssetToken = await ethers.getContractFactory("MonolithAssetToken");
+        mle = await MonolithAssetToken.deploy(owner.address);
+        await mle.waitForDeployment();
+        console.log(`MLE Token deployed to: ${await mle.getAddress()}`);
+        
+        // 3. Deploy Timelock
+        const MIN_DELAY = 3600; // 1 hour in seconds
+        const TimelockController = await ethers.getContractFactory("TimelockController");
+        timelock = await TimelockController.deploy(MIN_DELAY, [owner.address], [owner.address], owner.address);
+        await timelock.waitForDeployment();
+        console.log(`Timelock deployed to: ${await timelock.getAddress()}`);
+
+        // 4. Deploy the main DAO contract with the CORRECT 6 arguments
+        const MonolithLedgerDAO = await ethers.getContractFactory("MonolithLedgerDAO");
+        dao = await MonolithLedgerDAO.deploy(
+            await lith.getAddress(),    // IVotes _token
+            await timelock.getAddress(),// TimelockController _timelock
+            300,                        // uint48 _initialVotingDelay
+            20160,                      // uint32 _initialVotingPeriod
+            0,                          // uint256 _initialProposalThreshold
+            4                           // uint256 _initialQuorumFraction
+        );
+        await dao.waitForDeployment();
+        console.log(`DAO deployed to: ${await dao.getAddress()}`);
+
+        // 5. Delegate voting power to enable governance
+        await lith.delegate(owner.address);
+        console.log(`Voting power delegated to owner`);
+    });
+
+    it("Should successfully deploy all contracts", async function () {
+        expect(await lith.getAddress()).to.not.be.null;
+        expect(await mle.getAddress()).to.not.be.null;
+        expect(await timelock.getAddress()).to.not.be.null;
+        expect(await dao.getAddress()).to.not.be.null;
+    });
+
+    it("Should set up roles and ownership correctly", async function () {
+        const daoAddress = await dao.getAddress();
+        const timelockAddress = await timelock.getAddress();
+        
+        const PROPOSER_ROLE = await timelock.PROPOSER_ROLE();
+        const EXECUTOR_ROLE = await timelock.EXECUTOR_ROLE();
+        const DEFAULT_ADMIN_ROLE = await timelock.DEFAULT_ADMIN_ROLE(); 
+
+        await timelock.grantRole(PROPOSER_ROLE, daoAddress);
+        await timelock.grantRole(EXECUTOR_ROLE, ethers.ZeroAddress);
+        await timelock.revokeRole(DEFAULT_ADMIN_ROLE, owner.address);
+
+        await dao.transferOwnership(timelockAddress);
+        await mle.transferOwnership(daoAddress); 
+
+        expect(await dao.owner()).to.equal(timelockAddress);
+        expect(await mle.owner()).to.equal(daoAddress);
+    });
+});
-- 
2.49.0

